# SPDX-FileCopyrightText: 2024 Roy Wright
#
# SPDX-License-Identifier: MIT

# ref: https://packaging.python.org/en/latest/specifications/pyproject-toml

[build-system]
# defaults to using Hatch.
# Run "task switch-to-poetry" or "task switch-to-setuptools" to change as
# taskfiles/front-end*.yaml symbolic links need to be kept in sync with
# these values.
requires = ["setuptools >= 65", "wheel >= 0.38"]
build-backend = "setuptools.build_meta"

[project]
# TOML type: string
# The name of the project.
# Tools SHOULD normalize this name, as soon as it is read for internal consistency.
name = "wxdata-explorer"

# TOML type: string
# The version of the project, as defined in the Version specifier specification.
# Users SHOULD prefer to specify already-normalized versions
version = "0.1.1a1"

# TOML type: string
# The summary description of the project in one line. Tools MAY error if this includes multiple lines.
description = "Weather station historical data visualization."

# TOML type: string or table
# The full description of the project (i.e. the README).
#
# The key accepts either a string or a table. If it is a string then it is a path relative to pyproject.toml
# to a text file containing the full description. Tools MUST assume the file’s encoding is UTF-8. If the
# file path ends in a case-insensitive .md suffix, then tools MUST assume the content-type is text/markdown.
# If the file path ends in a case-insensitive .rst, then tools MUST assume the content-type is text/x-rst.
# If a tool recognizes more extensions than this PEP, they MAY infer the content-type for the user without
# specifying this key as dynamic. For all unrecognized suffixes when a content-type is not provided, tools
# MUST raise an error.
#
# more:  https://packaging.python.org/en/latest/specifications/pyproject-toml/#readme
readme = "README.md"

# TOML type: string
# The Python version requirements of the project.
requires-python = ">=3.11"

# TOML type: table
# The table may have one of two keys. The file key has a string value that is a file path relative to
# pyproject.toml to the file which contains the license for the project. Tools MUST assume the file’s
# encoding is UTF-8. The text key has a string value which is the license of the project. These keys are
# mutually exclusive, so a tool MUST raise an error if the metadata specifies both keys.
license = {file = "LICENSES/MIT.txt"}

# TOML type: Array of inline tables with string keys and values
# The people or organizations considered to be the “authors” of the project. The exact meaning is open to
# interpretation — it may list the original or primary authors, current maintainers, or owners of the package.
#
# These keys accept an array of tables with 2 keys: name and email. Both values must be strings. The name
# value MUST be a valid email name (i.e. whatever can be put as a name, before an email, in RFC 822) and not
# contain commas. The email value MUST be a valid email address. Both keys are optional, but at least one of
# the keys must be specified in the table.
#
# more:  https://packaging.python.org/en/latest/specifications/pyproject-toml/#authors-maintainers
authors = [
  {name = "Roy Wright", email = "roy@wright.org"}
]

# TOML type: Array of inline tables with string keys and values
# The “maintainers” key is similar to “authors” in that its exact meaning is open to interpretation.
maintainers = [
  {name = "Roy Wright", email = "roy@wright.org"}
]

# TOML type: array of strings
# The keywords for the project.
keywords = ["python", "CLI", "application", "weather", "neic", "ghcnd", "visualization"]

# TOML type: array of strings
# Trove classifiers (https://pypi.org/classifiers/) which apply to the project.
classifiers = [
  "Development Status :: 2 - Pre-Alpha",
  "Environment :: Console",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Natural Language :: English",
  "Operating System :: POSIX :: Linux",
  "Programming Language :: Python :: 3",
]

# TOML type: table with keys and values of strings
# A table of URLs where the key is the URL label and the value is the URL itself.
urls = {"wxdata_explorer" = "https://github.com/royw/wxdata_explorer"}

# TOML type: array of string
# Specifies which keys listed by this PEP were intentionally unspecified so another tool can/will provide
# such metadata dynamically. This clearly delineates which metadata is purposefully unspecified and expected
# to stay unspecified compared to being provided via tooling later on.
#
# more: https://packaging.python.org/en/latest/specifications/pyproject-toml/#dynamic
dynamic = []

# TOML type: table ([project.scripts], [project.gui-scripts], and [project.entry-points])
# Entry Points
# There are three tables related to entry points. The [project.scripts] table corresponds to the
# console_scripts group in the entry points specification. The key of the table is the name of the entry
# point and the value is the object reference.
#
# more: https://packaging.python.org/en/latest/specifications/pyproject-toml/#entry-points
#scripts = {}
#project.gui-scripts = {}
#project.entry-points = {}


# TOML type: Array of PEP 508 strings (dependencies)
# For dependencies, it is a key whose value is an array of strings. Each string represents a dependency of
# the project and MUST be formatted as a valid PEP 508 (https://peps.python.org/pep-0508/) string.
# Each string maps directly to a Requires-Dist entry.
#
# Note: tox needs project dependencies instead of tool.poetry.dependencies
# Also note a different grammar is required for version specification
dependencies = [
  "loguru>=0.7.2, <0.8.0",
  "pathvalidate<4.0.0,>=3.2.0",
  "tomlkit<0.13.0,>=0.12.5",
  "streamlit",
  "pandas"
]

# TOML type: a table with values of arrays of PEP 508 strings (optional-dependencies)
# For optional-dependencies, it is a table where each key specifies an extra and whose value is an array of
# strings. The strings of the arrays must be valid PEP 508 strings. The keys MUST be valid values for
# Provides-Extra. Each value in the array thus becomes a corresponding Requires-Dist entry for the matching
# Provides-Extra metadata.
[project.optional-dependencies]
dev = [
  "blacken-docs<2.0.0,>=1.18.0",
  "build<2.0.0,>=1.2.1",
#  "flict<2.0.0,>=1.2.14",
  "mypy<2.0.0,>=1.10.1",
  "pip-tools<8.0.0,>=7.4.1",
  "pre-commit<4.0.0,>=3.7.1",
  "pyupgrade<4.0.0,>=3.16.0",
  "ruff>=0.4.7,<0.5.0",
  "shellcheck-py<0.11.0,>=0.10.0.1",
  "toml-cli<0.8.0,>=0.7.0",
  "validate-pyproject>=0.18.0,<0.19.0",
]
test = [
  "coverage[toml]<8.0.0,>=7.5.4",
  "pytest>=8.2.2, <9.0.0",
  "pytest-cov<6.0.0,>=5.0.0",
  "pytest-xdist[psutil]<4.0.0,>=3.6.1",
]
metrics = [
  "radon<7.0.0,>=6.0.1",
]

### pytest

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
  "-n", "auto",
  "-ra", "--showlocals",
  "--strict-markers",
  "--strict-config",
]
xfail_strict = true
filterwarnings = [
  "error",
]
log_cli_level = "INFO"
pythonpath = "src"
testpaths = [
    "tests"
]

### pylint

[tool.pylint]
py-version = "3.8"
ignore-paths = [".*/_version.py"]
reports.output-format = "colorized"
similarities.ignore-imports = "yes"
messages_control.disable = [
  "design",
  "fixme",
  "line-too-long",
  "missing-module-docstring",
  "missing-function-docstring",
  "wrong-import-position",
]

### mypy linter

[tool.mypy]
files = ["src", "tests"]
python_version = "3.11"       # *** set to the oldest supported version of python ***
warn_unused_configs = true
strict = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
warn_unreachable = true
disallow_untyped_defs = false
disallow_incomplete_defs = false

[[tool.mypy.overrides]]
module = "tomlkit.parser"
implicit_reexport = true

### ruff linter/formatter: https://docs.astral.sh/ruff/settings

[tool.ruff]
# Allow imports relative to the "src" and "tests" directories.
src = ["src", "tests"]
# In addition to the standard set of exclusions, omit these.
extend-exclude = [".tox", "dist", "metrics", "scripts"]
# Set the maximum line length to 119.
line-length = 119
# fix lint issues.
fix = true
# Enumerate all fixed violations.
show-fixes = true

[tool.ruff.format]
# Enable reformatting of code snippets in docstrings.
docstring-code-format = true


[tool.ruff.lint]
# Add the `line-too-long` rule to the enforced rule set. By default, Ruff omits rules that
# overlap with the use of a formatter, like Black, but we can override this behavior by
# explicitly adding the rule.
# https://docs.astral.sh/ruff/rules
# extend-select = ["E501"]
extend-select = [
  #"F",        # pyflakes
  #"E",        # pycodestyle Error
  #"W",        # pycodestyle Warning
  "C901",     # mccade
  "I",        # isort
  "N",        # pep8-naming
  #"D",        # pydocstyle
  "UP",       # pyupgrade
  "YTT",      # flake8-2020
  #"ANN",      # flake8-annotations
  #"ASYNC",    # flake8-async
  #"S",        # flake8-bandit
  #"BLE",      # flake8-blind-except
  #"FBT",      # flake8-boolean-trap
  "B",        # flake8-bugbear
  #"A",        # flake8-builtins
  #"COM",      # flake8-commas
  #"CPY",      # flake8-copyright
  "C4",       # flake8-comprehensions
  #"DTZ",      # flake8-datetimez
  #"T10",      # flake8-debugger
  #"DJ",       # flake8-django
  "EM",       # flake8-errmsg
  "EXE",      # flake8-executable
  #"FA",       # flake8-future-annotations
  #"ICS",      # flake8-implicit-str-concat
  "ICN",      # flake8-import-conventions
  "LOG",      # flake8-logging (added 7/4/24)
  "G",        # flake8-logging-format
  "INP",      # flake8-no-pep420 (added 7/4/24)
  "PIE",      # flake8-pie
  "T20",      # flake8-print
  #"PYI",      # flake8-pyi
  "PT",       # flake8-pytest-style
  #"Q",        # flake8-quotes
  #"RSE",      # flake8-raise
  "RET",      # flake8-return
  #"SLF",      # flake8-self
  #"SLOT",     # flake8-slot
  "SIM",      # flake8-simplify
  #"TID",      # flake8-tidy
  #"TCH",      # flake8-type-checking
  #"INT",      # flake8-gettest
  "ARG",      # flake8-unused-arguments
  "PTH",      # flake8-use-pathlib
  #"TD",       # flake8-todos
  #"FIX",      # flake8-fixme
  #"ERA",      # eradicate
  "PD",       # pandas-vet
  "PGH",      # pygrep-hooks
  "PL",       # pylint
  #"TRY",      # tryceratops
  #"FLY",      # flynt
  "NPY",      # NumPy specific rules
  #"AIR",      # airflow
  #"PERF",     # perflint
  #"FURB",     # refurb
  "RUF",      # Ruff-specific
]
ignore = [
  "PLR09",    # Too many <...>
  "PLR2004",  # Magic value used in comparison
  "ISC001",   # Conflicts with formatter
  "S101",     # pytest uses "assert" so allow it
]
isort.required-imports = ["from __future__ import annotations"]
# Uncomment if using a _compat.typing backport
# typing-modules = ["scientific python._compat.typing"]

[tool.ruff.lint.per-file-ignores]
"tests/**" = ["T20"]
"noxfile.py" = ["T20"]

[tool.coverage.run]
#source_pkgs = ["*"]
branch = true
parallel = true
omit = [
#  "src/version_bumper/clibones/*"
]

[tool.coverage.paths]
source = ["src"]
tests = ["tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]
